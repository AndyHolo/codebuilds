language: cpp

# x86 toolchain (used as a base for non-sudo compilation, which is faster) 
include: &toolchain_x86
  sudo: true
  addons:
    apt:
      sources:
        - ubuntu-toolchain-r-test
      packages:
        - gcc-4.9
        - g++-4.9
        - gcc-4.9-multilib
        - g++-4.9-multilib
        - libc6-dev-i386
        - zip
        - libgtk2.0-0
        - libx11-dev
        - libxkbfile-dev
        - rpm
        - xvfb
        
# OSX amd64 toolchain
include: &toolchain_osx_amd64
  <<: *toolchain_x86
  env:
    - LABEL=amd64_osx
    - ARCH=amd64
    - GPP_COMPILER=g++
    - GCC_COMPILER=gcc
    - VSCODE_ELECTRON_PLATFORM=x64
        
# linux amd64 toolchain
include: &toolchain_linux_amd64
  <<: *toolchain_x86
  env:
    - LABEL=amd64_linux
    - ARCH=amd64
    - GPP_COMPILER=g++-4.9
    - GCC_COMPILER=gcc-4.9
    - VSCODE_ELECTRON_PLATFORM=x64
    - PACKAGE_ARCH=x64
    
# cross toolchain (used as a base for multiarch cross-compilation configurations below) 
include: &toolchain_linux_cross
  dist: trusty
  sudo: required # for dpkg --add-architecture locking
  
# armhf toolchain
include: &toolchain_linux_armhf
  <<: *toolchain_linux_cross
  env:
    - LABEL=armhf_linux
    - CROSS_TOOLCHAIN=true
    - ARCH=armhf
    - NPM_ARCH=arm
    - GNU_TRIPLET=arm-linux-gnueabihf
    - GNU_MULTILIB_TRIPLET=arm-linux-gnueabihf
    - GPP_COMPILER=arm-linux-gnueabihf-g++
    - GCC_COMPILER=arm-linux-gnueabihf-gcc
    - VSCODE_ELECTRON_PLATFORM=arm
    - PACKAGE_ARCH=armhf
  
# arm64 toolchain
include: &toolchain_linux_arm64
  <<: *toolchain_linux_cross
  env:
    - LABEL=arm64_linux
    - CROSS_TOOLCHAIN=true
    - ARCH=arm64
    - NPM_ARCH=arm
    - GNU_TRIPLET=aarch64-linux-gnu
    - GNU_MULTILIB_TRIPLET=arm-linux-gnueabihf
    - GPP_COMPILER=aarch64-linux-gnu-g++
    - GCC_COMPILER=aarch64-linux-gnu-gcc
    - VSCODE_ELECTRON_PLATFORM=arm
    - PACKAGE_ARCH=arm64

# Travis CI build matrix.  Each entry below will trigger an extra, parallel build on Travis.
matrix:
  include:
  - os: linux
    <<: *toolchain_linux_armhf
  - os: linux
    <<: *toolchain_linux_arm64
  - os: linux
    env:
      - LABEL=merge
    
notifications:
  email: false
  
script:
  - if [[ "${TRAVIS_EVENT_TYPE}" != "cron" ]]; then
      if [[ "${LABEL}" == "merge" ]]; then
        git config user.name "headmelted";
        git config user.email "headmelted@gmail.com";
        trap 'test -n "$SSH_AGENT_PID" && eval `/usr/bin/ssh-agent -k`' 0;
        mkdir -p ~/.ssh;
        touch ~/.ssh/mergebot.key;
        chmod 400 ~/.ssh/mergebot.key;
        echo "${MERGEBOT_SEC_KEY}" > ~/.ssh/mergebot.key;
        eval "$(ssh-agent)";
        ssh-add -k ~/.ssh/mergebot.key;
        rm ~/.ssh/mergebot.key;
        ssh-keyscan github.com | tee -a ~/.ssh/known_hosts;
        git remote set-url origin git@github.com:headmelted/codematic.git;
        git remote add upstream https://github.com/Microsoft/vscode.git;
        git fetch upstream master;
        mergeoutput=$(git merge upstream/master -s recursive -X theirs);
        echo $mergeoutput;
        git pull upstream master;
        git checkout -b temp;
        git branch -f master temp;
        git checkout master;
        git branch -d temp;
        hash=$(git log -n 1 --pretty=format:"%H");
        git tag -a "merged_${hash}" -m "Nightly merge up to ${hash}";
        git push origin master --follow-tags;
        ssh-keygen -R github.com;
        trap 'test -n "$SSH_AGENT_PID" && eval `/usr/bin/ssh-agent -k`' 0;
      else
        echo "This is a merge triggered by cron, so nothing to build.";
      fi;
    else
      export CXX="${GPP_COMPILER}" CC="${GCC_COMPILER}";
      if [[ "${CROSS_TOOLCHAIN}" == "true" ]]; then
        sudo rm -rf /etc/apt/sources.list.d/**;
        sudo rm /etc/apt/sources.list; 
        echo "deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu xenial main universe multiverse restricted" | sudo tee /etc/apt/sources.list;
        echo "deb [arch=${ARCH}] http://ports.ubuntu.com/ubuntu-ports xenial main universe multiverse restricted" | sudo tee -a /etc/apt/sources.list;
        echo "deb-src http://archive.ubuntu.com/ubuntu xenial main universe multiverse restricted" | sudo tee -a /etc/apt/sources.list;
        sudo dpkg --add-architecture ${ARCH};
        sudo apt-get update -yq;
        sudo apt-get install -y xvfb libwww-perl libexpat1 libxml-libxml-perl libxml-sax-expat-perl gcc-${GNU_TRIPLET} g++-${GNU_TRIPLET} pkg-config-${GNU_TRIPLET} crossbuild-essential-${ARCH} g++-multilib-${GNU_MULTILIB_TRIPLET} gcc-multilib-${GNU_MULTILIB_TRIPLET} dpkg-dev perl libconfig-inifiles-perl libxml-simple-perl liblocale-gettext-perl libgcc1 libgcc1:${ARCH} libdpkg-perl libconfig-auto-perl libdebian-dpkgcross-perl ucf debconf dpkg-cross libdbus-1-3:${ARCH} libffi6:${ARCH} libpcre3:${ARCH} libselinux1:${ARCH} libp11-kit0:${ARCH} libcomerr2:${ARCH} libk5crypto3:${ARCH} libkrb5-3:${ARCH} libpango-1.0-0:${ARCH} libpangocairo-1.0-0:${ARCH} libpangoft2-1.0-0:${ARCH} libxcursor1:${ARCH} libxfixes3:${ARCH} libglib2.0-0:${ARCH} libfreetype6:${ARCH} libpng12-0:${ARCH} libavahi-client3:${ARCH} libgssapi-krb5-2:${ARCH} fontconfig-config:${ARCH} libexpat1:${ARCH} libjasper1:${ARCH} libjpeg8:${ARCH} libpng12-0:${ARCH} libtiff5:${ARCH} libgdk-pixbuf2.0-common:${ARCH} libgdk-pixbuf2.0-0:${ARCH} libfontconfig1:${ARCH} libcups2:${ARCH} libcairo2:${ARCH} libc6 libc6:${ARCH} libc6-dev:${ARCH} libatk1.0-0:${ARCH} libgtk2.0-0:${ARCH} libx11-dev:${ARCH} libxkbfile-dev:${ARCH} rpm qemu binfmt-support qemu-user-static;
        echo "Emulators running:" && update-binfmts --display;
      fi;
      git submodule update --init --recursive;
      git clone --depth 1 https://github.com/creationix/nvm.git ./.nvm;
      source ./.nvm/nvm.sh;
      nvm install 6.6.0;
      nvm use 6.6.0;
      npm config set python `which python`;
      npm install -g gulp;
      gulp hygiene | tee -a buildlog_${LABEL}.txt;
      if [[ "${ARCH}" == "amd64" ]]; then
        ./scripts/npm.sh install --unsafe-perm | tee -a buildlog_${LABEL}.txt;
        gulp electron | tee -a buildlog_${LABEL}.txt;
      else
        ./scripts/npm.sh install --unsafe-perm --arch=${NPM_ARCH} | tee -a buildlog_${LABEL}.txt;
        gulp electron --arch=${VSCODE_ELECTRON_PLATFORM} | tee -a buildlog_${LABEL}.txt;
      fi;
      gulp compile --max_old_space_size=4096 | tee -a buildlog_${LABEL}.txt;
      gulp optimize-vscode --max_old_space_size=4096 | tee -a buildlog_${LABEL}.txt;
      mv ./vscode-multiarch-specific/xvfb /etc/init.d/xvfb;
      sh -e /etc/init.d/xvfb start;
      sleep 10;
      DISPLAY=:99 dbus-launch;
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        ./scripts/test.sh --coverage;
      else
        ./scripts/test.sh;
      fi;
      ./scripts/test-integration.sh;
      gulp "vscode-linux-${PLATFORM_ARCH}" | tee -a buildlog_${LABEL}.txt;
      gulp "vscode-linux-${PACKAGE_ARCH}-build-deb" | tee -a buildlog_${LABEL}.txt;
      gulp "vscode-linux-${PACKAGE_ARCH}-build-rpm" | tee -a buildlog_${LABEL}.txt;
      tar -zcvf "archive_${LABEL}.tar.gz" .build | tee -a buildlog_${LABEL}.txt;  
    fi;

deploy:
  provider: releases
  api_key: "$GITHUB_TOKEN"
  file_glob: true
  file:
    - .build/linux/**/*.deb
    - .build/linux/**/*.rpm
    - .build/linux/**/*.flatpak
    - ./buildlog_*.txt
    - ./archive_*.tar.gz
  skip_cleanup: true
  on:
    repo: headmelted/codematic
    tags: true
  branches:
    only:
      - /^merged_.*$/
    
after_deploy:
  - cd vscode-multiarch-specific;
  - bash ./pushToBintray.sh ../.build/linux/deb/*/deb/*.deb;
  - bash ./pushToBintray.sh ../.build/linux/rpm/*/*.rpm;

